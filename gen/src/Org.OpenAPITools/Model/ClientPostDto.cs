/* 
 * RentalService.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ClientPostDto
    /// </summary>
    [DataContract]
    public partial class ClientPostDto :  IEquatable<ClientPostDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientPostDto" /> class.
        /// </summary>
        /// <param name="lastName">LastName - information about the client&#39;s last name.</param>
        /// <param name="firstName">FirstName - information about the client&#39;s first name.</param>
        /// <param name="patronymic">Patronymic - information about the client&#39;s patronymic.</param>
        /// <param name="birthDate">BirthDate - date and time of birth.</param>
        /// <param name="passport">Passport - passport series and number.</param>
        public ClientPostDto(string lastName = default(string), string firstName = default(string), string patronymic = default(string), DateTime birthDate = default(DateTime), string passport = default(string))
        {
            this.LastName = lastName;
            this.FirstName = firstName;
            this.Patronymic = patronymic;
            this.Passport = passport;
            this.LastName = lastName;
            this.FirstName = firstName;
            this.Patronymic = patronymic;
            this.BirthDate = birthDate;
            this.Passport = passport;
        }
        
        /// <summary>
        /// LastName - information about the client&#39;s last name
        /// </summary>
        /// <value>LastName - information about the client&#39;s last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=true)]
        public string LastName { get; set; }

        /// <summary>
        /// FirstName - information about the client&#39;s first name
        /// </summary>
        /// <value>FirstName - information about the client&#39;s first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Patronymic - information about the client&#39;s patronymic
        /// </summary>
        /// <value>Patronymic - information about the client&#39;s patronymic</value>
        [DataMember(Name="patronymic", EmitDefaultValue=true)]
        public string Patronymic { get; set; }

        /// <summary>
        /// BirthDate - date and time of birth
        /// </summary>
        /// <value>BirthDate - date and time of birth</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// Passport - passport series and number
        /// </summary>
        /// <value>Passport - passport series and number</value>
        [DataMember(Name="passport", EmitDefaultValue=true)]
        public string Passport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientPostDto {\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Patronymic: ").Append(Patronymic).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Passport: ").Append(Passport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientPostDto);
        }

        /// <summary>
        /// Returns true if ClientPostDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientPostDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientPostDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Patronymic == input.Patronymic ||
                    (this.Patronymic != null &&
                    this.Patronymic.Equals(input.Patronymic))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Passport == input.Passport ||
                    (this.Passport != null &&
                    this.Passport.Equals(input.Passport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Patronymic != null)
                    hashCode = hashCode * 59 + this.Patronymic.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.Passport != null)
                    hashCode = hashCode * 59 + this.Passport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
