/* 
 * RentalService.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RefundInformation
    /// </summary>
    [DataContract]
    public partial class RefundInformation :  IEquatable<RefundInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundInformation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="rentalPointId">rentalPointId.</param>
        /// <param name="refundDate">refundDate.</param>
        /// <param name="issuedCarId">issuedCarId.</param>
        public RefundInformation(long id = default(long), long rentalPointId = default(long), DateTime refundDate = default(DateTime), long? issuedCarId = default(long?))
        {
            this.IssuedCarId = issuedCarId;
            this.Id = id;
            this.RentalPointId = rentalPointId;
            this.RefundDate = refundDate;
            this.IssuedCarId = issuedCarId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets RentalPointId
        /// </summary>
        [DataMember(Name="rentalPointId", EmitDefaultValue=false)]
        public long RentalPointId { get; set; }

        /// <summary>
        /// Gets or Sets RefundDate
        /// </summary>
        [DataMember(Name="refundDate", EmitDefaultValue=false)]
        public DateTime RefundDate { get; set; }

        /// <summary>
        /// Gets or Sets IssuedCarId
        /// </summary>
        [DataMember(Name="issuedCarId", EmitDefaultValue=true)]
        public long? IssuedCarId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefundInformation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RentalPointId: ").Append(RentalPointId).Append("\n");
            sb.Append("  RefundDate: ").Append(RefundDate).Append("\n");
            sb.Append("  IssuedCarId: ").Append(IssuedCarId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundInformation);
        }

        /// <summary>
        /// Returns true if RefundInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RentalPointId == input.RentalPointId ||
                    (this.RentalPointId != null &&
                    this.RentalPointId.Equals(input.RentalPointId))
                ) && 
                (
                    this.RefundDate == input.RefundDate ||
                    (this.RefundDate != null &&
                    this.RefundDate.Equals(input.RefundDate))
                ) && 
                (
                    this.IssuedCarId == input.IssuedCarId ||
                    (this.IssuedCarId != null &&
                    this.IssuedCarId.Equals(input.IssuedCarId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RentalPointId != null)
                    hashCode = hashCode * 59 + this.RentalPointId.GetHashCode();
                if (this.RefundDate != null)
                    hashCode = hashCode * 59 + this.RefundDate.GetHashCode();
                if (this.IssuedCarId != null)
                    hashCode = hashCode * 59 + this.IssuedCarId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
