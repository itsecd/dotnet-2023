/* 
 * RentalService.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VehiclePostDto
    /// </summary>
    [DataContract]
    public partial class VehiclePostDto :  IEquatable<VehiclePostDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclePostDto" /> class.
        /// </summary>
        /// <param name="number">Number - unique car number.</param>
        /// <param name="vehicleModelId">Model - contains the identifier of the car model.</param>
        /// <param name="colour">Colour - car colour.</param>
        public VehiclePostDto(string number = default(string), long vehicleModelId = default(long), string colour = default(string))
        {
            this.Number = number;
            this.Colour = colour;
            this.Number = number;
            this.VehicleModelId = vehicleModelId;
            this.Colour = colour;
        }
        
        /// <summary>
        /// Number - unique car number
        /// </summary>
        /// <value>Number - unique car number</value>
        [DataMember(Name="number", EmitDefaultValue=true)]
        public string Number { get; set; }

        /// <summary>
        /// Model - contains the identifier of the car model
        /// </summary>
        /// <value>Model - contains the identifier of the car model</value>
        [DataMember(Name="vehicleModelId", EmitDefaultValue=false)]
        public long VehicleModelId { get; set; }

        /// <summary>
        /// Colour - car colour
        /// </summary>
        /// <value>Colour - car colour</value>
        [DataMember(Name="colour", EmitDefaultValue=true)]
        public string Colour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehiclePostDto {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  VehicleModelId: ").Append(VehicleModelId).Append("\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehiclePostDto);
        }

        /// <summary>
        /// Returns true if VehiclePostDto instances are equal
        /// </summary>
        /// <param name="input">Instance of VehiclePostDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehiclePostDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.VehicleModelId == input.VehicleModelId ||
                    (this.VehicleModelId != null &&
                    this.VehicleModelId.Equals(input.VehicleModelId))
                ) && 
                (
                    this.Colour == input.Colour ||
                    (this.Colour != null &&
                    this.Colour.Equals(input.Colour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.VehicleModelId != null)
                    hashCode = hashCode * 59 + this.VehicleModelId.GetHashCode();
                if (this.Colour != null)
                    hashCode = hashCode * 59 + this.Colour.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
